Nome assegnazione: micro_paint
File previsti: *.c *.h
Funzioni consentite: fopen, fread, fscanf, fclose, write, malloc, calloc, realloc, free, memset, powf, sqrtf
-------------------------------------------------- ------------------------------------

Scrivete un programma che prenda come parametro un "file delle operazioni" e visualizzi il risultato nel terminale

Il tuo programma prenderà solo un argomento, questo sarà il percorso del "file delle operazioni"
Se il tuo programma riceve 0 o più di 1 argomento, dovrebbe visualizzare "Errore: argomento" seguito da un \n in STDOUT

$> ./micro_paint | gatto-e
Errore: argomento$
$> ./micro_paint non temere la matematica | gatto-e
Errore: argomento$
$>

Se il tuo programma riscontra un problema quando apre o legge il "file dell'operazione", dovrebbe scrivere "Errore: file dell'operazione danneggiato" seguito da un \n in STDOUT

Il "file operazione" sarà composto da un'operazione per riga
Se una riga non è corretta, si è appena verificato un problema.
Se il tuo programma ha un problema, deve restituire 1
Se il tuo programma non ha riscontrato alcun problema, dovrebbe restituire 0
L'ultima riga del file non finirà necessariamente con un \n
Le righe devono essere lette in ordine e quindi le operazioni devono essere eseguite nello stesso ordine
Ci deve essere almeno uno spazio tra ogni variabile in una riga

LARGHEZZA ALTEZZA BACKGROUND_CHAR
Questa riga sarà sempre la prima riga del file e definisce la cosiddetta area di "disegno". Il tuo programma non dovrebbe visualizzare nulla al di fuori di questa "area di disegno". Questa linea sarà presente solo una volta.
- WIDTH: deve essere un int tale che 0 < WIDTH <= 300, C è il numero di caratteri orizzontali utilizzati per l'area di disegno
- HEIGHT: deve essere un int come 0 < HEIGHT <= 300, C è il numero di caratteri verticali utilizzati per l'area di disegno
- BACKGROUND_CHAR: per impostazione predefinita tutta l'"area di disegno" è riempita con BACKGROUND_CHAR

r X Y LARGHEZZA ALTEZZA CAR
Questa operazione disegnerà un rettangolo vuoto, dove viene disegnato solo il bordo del rettangolo
- r: il carattere r
- X: un float, la posizione orizzontale dell'angolo in alto a sinistra del rettangolo
- Y: un float, la posizione verticale dell'angolo in alto a sinistra del rettangolo
- WIDTH: un float positivo diverso da 0, la larghezza del cerchio (orizzontale)
- ALTEZZA: un float positivo diverso da 0, l'altezza del cerchio (verticale)
- CAR: un carattere, il carattere utilizzato per disegnare il rettangolo

R X Y LARGHEZZA ALTEZZA CAR
Questa operazione disegnerà un rettangolo pieno
- R: il carattere R
- X: un float, la posizione orizzontale dell'angolo in alto a sinistra del rettangolo
- Y: un float, la posizione verticale dell'angolo in alto a sinistra del rettangolo
- WIDTH: un float positivo diverso da 0, la larghezza del cerchio (orizzontale)
- ALTEZZA: un float positivo diverso da 0, l'altezza del cerchio (verticale)
- CAR: un carattere, il carattere utilizzato per disegnare il rettangolo

L'"area di disegno" è divisa in rettangoli che possono contenere ognuno un singolo carattere (questo perchè siamo in un terminale...) li chiameremo pixel
Per facilitare i calcoli utilizzeremo solo l'angolo in alto a sinistra di un pixel per sapere se si trova in un rettangolo o meno
Se l'angolo in alto a sinistra di un pixel si trova a una distanza maggiore o uguale a 1 dal bordo di un rettangolo, non fa parte di un rettangolo vuoto
Se l'angolo in alto a sinistra di un pixel si trova a una distanza inferiore a 1 dal bordo di un rettangolo, allora fa parte di un rettangolo vuoto

Dovresti guardare l'immagine fornita mentre leggi le righe successive. Questa immagine rappresenta il terminale. Abbiamo realizzato una "area di disegno" con una LARGHEZZA di 5 e un'ALTEZZA di 3
Abbiamo scritto una lettera diversa per carattere nell'area di disegno per facilitare le spiegazioni.
- Se si desidera eseguire l'operazione: r 2.5 1.5 1 1 X (il rettangolo verde)
-- Questo farà sì che il carattere 'D' nell'immagine venga sostituito da 'X'

Troverai il nostro_micro_paint per aiutarti a testare così come i file operation_file.example

Trucco:
Se 1 punto è definito da (Xa, Ya)
E che un rettangolo è definito dal suo angolo superiore sinistro (Xtl, Ytl) e dal suo angolo inferiore destro (Xbr, Ybr)
Se Xtl <= Xa <= Xbr e Ytl <= Ya <= Ybr allora il punto è nel rettangolo
